apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName build_versions.version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //room 输出模式:在编译时，将数据库的模式信息导出到JSON文件中，这样可有利于我们更好的调试和排错
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    api project(':lib_opensource')
    //使用到room的Moudel必须加上这个
    annotationProcessor deps.room.compiler

}

//uploadArchives {
//    configuration = configurations.archives
//    repositories {
//        mavenDeployer {
//            snapshotRepository(url: getsSnapshotUrl()) {
//                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//            }
//            repository(url: getReleaseUrl()) {
//                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
//            }
//            pom.project {
//                version '1.0.0'
//                artifactId 'lib-coremodel'
//                groupId getGroupId()
//                packaging getType()
//                description getDescription()
//            }
//        }
//    }
//}
//
//artifacts {
//    archives file('lib_coremodel.aar')
//}
//
//def isReleaseBuild() {
//    return VERSION_NAME.contains("SNAPSHOT") == false
//}
//
//def getsSnapshotUrl() {
//    return hasProperty('MAVEN_REPO_SNAPSHOT_URL') ? MAVEN_REPO_SNAPSHOT_URL : ""
//}
//
//def getReleaseUrl() {
//    return hasProperty('MAVEN_REPO_RELEASE_URL') ? MAVEN_REPO_RELEASE_URL : ""
//}
//
//def getRepositoryUsername() {
//    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
//}
//def getRepositoryPassword() {
//    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
//}
//
//def getGroupId() {
//    return hasProperty('GROUP_ID') ? GROUP_ID : ""
//}
//def getType() {
//    return hasProperty('TYPE') ? TYPE : ""
//}
//def getDescription() {
//    return hasProperty('DESCRIPTION') ? DESCRIPTION : ""
//}